// Code generated by go-bindata.
// sources:
// html/auth.html
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _authHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x2f\x2f\x07\x04\x00\x00\xff\xff\x69\xac\xe0\x00\x03\x00\x00\x00")

func authHtmlBytes() ([]byte, error) {
	return bindataRead(
		_authHtml,
		"auth.html",
	)
}

func authHtml() (*asset, error) {
	bytes, err := authHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth.html", size: 3, mode: os.FileMode(436), modTime: time.Unix(1506802708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x6d\x6f\xe3\xb8\xf1\x7f\x6d\x7d\x8a\x39\x05\x8b\xc4\xf9\xcb\x7a\x88\xed\x38\x2b\xd9\xf9\x17\xb8\xdd\x3b\x14\xb8\x76\x17\x68\x0e\x68\x51\xf4\x05\x2d\x8e\x6d\x6e\x28\x51\x25\xe9\xc4\x49\x90\xef\x5e\x90\x94\xe4\x87\xd8\x7b\x71\xf6\x62\x6f\x2c\x71\xc8\x99\xe1\x90\xc3\xdf\x0c\x67\xc7\x3f\x7d\xfa\xf2\xf3\xcd\xbf\xbe\x7e\x86\x85\x2e\xf8\xb5\x37\x36\x0f\x30\x4f\x24\xf4\xda\x03\x18\x17\xa8\x09\xe4\x0b\x22\x15\xea\x89\xff\xfb\xcd\x2f\xbd\x2b\xdf\x76\x68\xa6\x39\x5e\xff\x26\xe6\xac\x84\x5f\x84\x2c\xc6\x91\xa3\x98\x3e\xce\xca\x5b\x90\xc8\x27\xbe\xd2\x0f\x1c\xd5\x02\x51\xfb\xb0\x90\x38\x9b\xf8\x0b\xad\x2b\x95\x46\x51\x4e\xcb\x6f\x2a\xcc\xb9\x58\xd2\x19\x27\x12\xc3\x5c\x14\x11\xf9\x46\x56\x11\x67\x53\x15\x95\x42\x16\x84\xb3\x47\x8c\x86\x61\x1c\xc6\xeb\x76\x58\xb0\x32\xcc\x95\xb2\xb3\x30\x9f\xb1\xd5\xd1\xb4\xa2\x73\xf8\xfb\x97\x9b\xcf\x29\xdc\x2c\x10\x9c\x76\xb8\x47\x89\x40\x28\x45\x0a\xac\xe4\xac\x44\x98\x62\x4e\x96\x0a\xe1\xab\xc4\x19\x5b\xcd\x24\x22\x94\x88\x54\x01\xc9\x73\x54\x0a\xb4\x80\x07\xb1\x94\x8d\x00\x52\x52\xd0\x0b\x7c\x80\x62\xa9\x34\x4c\xb1\x16\x43\x81\xcd\x1c\x9d\x48\x04\x51\x02\x17\x39\xe1\x40\x99\xba\xfd\x09\xce\xa3\x7a\x46\x7f\x61\x45\x25\xa4\x86\xa5\xe4\x67\x8d\xf1\x33\x51\x6a\x15\xce\x85\x98\x73\x24\x15\x53\xd6\xf8\x5c\xa9\xff\x9f\x91\x82\xf1\x87\xc9\x97\x0a\xcb\xff\xfb\x07\x29\x55\x37\xf3\xc2\xa9\x2e\xe1\xc9\x48\xad\x38\x79\x48\x6b\xdd\xbd\x29\x17\xf9\x6d\x06\xe7\x3b\xf4\x0c\xce\x1f\x85\x28\x52\x48\x32\xa8\x08\xa5\xac\x9c\xa7\x30\xa8\x56\x90\xc4\xd5\xca\xbc\x64\x50\x10\x39\x67\x65\x6f\x2a\xb4\x36\x03\xe3\x0c\xcc\x74\x7a\x8a\x3d\x62\x0a\x49\xdf\x0c\xb1\x1a\x16\xc8\xe6\x0b\x9d\x42\x72\x65\x48\xb9\xe0\x42\xa6\x70\xd2\xb7\x9f\x0c\x34\xae\x74\x8f\x70\x36\x2f\x53\xc8\xb1\xd4\x28\x33\x4b\x52\x0b\x42\xc5\x7d\x0a\x31\x24\x46\x6b\xb5\x02\x39\x9f\x92\xb3\x8b\xe1\x30\x80\xf5\x4f\x1c\x8e\x86\xdd\x0c\xee\x50\x6a\x96\x13\xde\x08\x2a\x18\xa5\x1c\x33\x98\x92\xfc\x76\x2e\xc5\xb2\xa4\xbd\x46\xef\x6c\x68\xbe\x5b\x5d\xac\x20\x73\x4c\xa1\x57\x88\xc7\x9e\x99\x31\x91\xbd\xb9\x24\x94\x61\xa9\xcf\xb4\xa8\x02\x38\x99\xd9\x4f\x00\x27\x78\x69\xbe\xdd\xfd\xec\xea\x47\xb8\xef\x71\x7a\xcb\xf4\x9a\xd5\x89\x0a\x20\x86\xd8\xfc\x24\x71\xfc\x21\x80\x99\x14\xc5\x59\x2d\xaf\x1b\x80\x16\x67\x8d\xcc\xef\x0a\xfd\x81\x69\x89\x1f\x60\x7e\x03\xa7\xc4\x0a\x89\x4e\xc1\x3d\x7b\xab\x0c\x66\x8c\x6b\x94\x29\x54\x52\xcc\x19\x4d\xe9\xca\x0a\xd7\x92\x94\x6a\x26\x64\x11\x16\x2c\x97\x42\x89\x99\x0e\x5b\x3d\x4a\x13\xa9\x7f\x36\xfb\xad\xb4\x9c\xb4\x0a\xb1\xa4\x6b\xa2\x53\x1e\xc0\xaf\x35\xd3\xcd\x43\x85\x93\xd8\x4c\x46\x48\x8a\xb2\x75\x17\x37\x6e\xf7\xb9\x3b\xcc\xba\xa6\xd9\x27\xf7\x2f\x4c\xba\xaf\x21\x5d\x0c\x5b\x7d\xa9\xf5\x70\x25\x38\xa3\x6b\x1d\xcd\xf6\xd5\xba\xcc\x4c\x97\x2a\x75\x87\xcf\x3a\xeb\xbe\x8e\xbd\x83\x5b\x41\xab\xf6\x5c\xb1\x52\xa1\xae\x4f\x57\x7c\xe0\x6c\x5d\x74\x83\x7a\xc4\x45\x73\xfe\x36\xa6\x1f\x9b\xe9\xd7\xf3\xf8\xd3\xe5\xbe\x83\xc8\x7c\x29\x95\xd9\xac\x4a\x30\x0b\x33\x70\x5e\x23\x18\xc7\x99\x4e\x21\xec\x63\x91\xc1\xb3\xc5\xc9\x74\x21\xee\x50\x06\x60\xdf\x49\xae\xd9\x1d\xba\x46\xb8\xd5\xa0\x4c\x91\x29\x47\xea\x9a\xff\x6e\x9a\xff\x81\xa7\x7d\xc8\xd3\x6c\xab\x53\xd1\xe3\x44\xce\x11\x9e\xd6\xe8\xfa\xd1\xe0\x9c\xdd\xaf\x4d\x1c\x1d\xbe\xc0\x51\x17\xc2\x0e\xba\xc7\xf0\x90\x7b\x0c\xf7\xb8\x87\xa5\x6d\xda\x0c\x4f\xfb\x11\x9a\x62\x2e\x24\xd1\x4c\x94\x66\x02\xe5\x7e\x6c\x6d\x0f\xc7\xba\xab\x12\x8a\x39\xae\x18\x7a\xce\x98\x66\xde\xf6\x0c\xd7\x9d\x7b\x38\xcc\x99\x51\x35\x86\xd4\x06\x1d\xc9\xa1\x8e\x64\x10\xc7\x8d\x3f\x6a\x70\xbd\xe9\x95\x64\x05\x91\x0f\xce\x61\x9a\x56\xbb\xf2\x3b\x81\xaf\xb7\xe1\xf0\xbb\xb0\xd1\x86\x33\xfb\xd9\x95\x5f\xbb\xe9\x7a\x33\xbf\x13\x3b\xb7\x39\xf7\xbb\xee\x80\x8c\x46\x74\x70\x64\xd0\xbc\xc4\xe9\x25\xc5\xa0\xe1\x3e\x32\x68\xbe\x8a\xfb\x88\xa0\xe9\xe4\xd5\x41\xb3\x96\xf9\x86\xa0\xf9\xaa\x69\x1d\x0a\x9a\xaf\x61\x7e\x03\xe7\x7b\x04\xcd\x46\xe1\x56\xd0\x74\xca\xf7\x04\xcd\x7d\x51\xac\x3f\xba\xbc\x98\xe6\xd9\xb6\x53\x37\xb9\x5c\xb2\x06\x69\xfb\x0d\x07\x7f\x3a\xe6\xbf\xf4\xed\x4d\x54\x6f\x69\x9b\x80\xbe\x73\x7c\x76\x88\xdb\x68\xdf\x90\xb7\x50\xbf\x59\xf7\x83\x08\xd9\x1c\xa4\x7a\x62\x36\xf9\x86\x27\xb8\x67\x54\x2f\x52\xeb\xaf\x59\x9b\xa1\xd7\x99\xf9\xb3\xe7\x9d\xc3\xd3\x76\x0c\x67\x8f\x26\x62\xd4\x58\x3e\x15\xab\xcd\x38\xbc\xaf\x4f\x1d\xec\x12\x87\x7a\x0e\x90\x9f\x3d\xcf\xde\xed\x76\xe6\x5c\xc7\x26\xd7\x30\xab\x3c\xe3\xe2\x3e\x5d\x30\x4a\xb1\xb4\x4c\x53\x41\x0d\xb6\x78\x9d\x4d\x36\xaf\xb3\xc9\xe7\x75\x6c\xdc\x73\x57\x97\x14\x4e\xcd\xe5\x05\xcc\xe5\xe5\x34\x00\x45\x4a\xd5\x53\x28\xd9\x2c\xf3\x3a\xeb\x75\x4d\xe1\x24\xfe\x78\x31\x1a\x5e\xee\x50\xed\x6a\x18\x27\x25\x7c\x7d\x92\xe2\x0f\x35\x20\x20\xe7\xac\x52\x08\xb9\x73\x07\xeb\x38\x49\x3c\x08\x92\x8b\xab\x20\xe9\x5f\x05\xe1\xa0\x0b\x49\xfc\x21\x70\x1d\xfd\xab\x20\x49\x06\xc1\xe8\x32\x88\xbb\x30\x88\x3f\x74\x83\xc3\x98\xe7\x64\x0d\x47\x41\x32\xea\x07\x17\xc9\xc7\xc0\x80\x35\x18\x9d\xb6\x63\x70\x11\x5c\xc6\xc1\xd5\xa8\xd6\x60\x64\xed\x07\xd0\xde\x60\x48\x71\x1e\x00\x9c\x5c\x8e\x62\x9a\xc4\x56\x44\x6d\xaa\x63\xdc\x35\xb8\xf6\x8e\x77\xb3\xf9\xfb\xb0\x78\xd0\xee\xc3\x66\x1f\x10\xb7\xcf\xf2\xef\x1a\x2e\xde\xd3\xe6\x03\x40\xfe\x06\x73\x5f\x4a\x3a\xda\xd2\x42\xbd\xa7\xa9\x87\x02\xf1\x1b\x6c\xdd\x23\xea\x68\x63\xdf\xdd\x9f\x5f\x1a\x0b\xae\x92\xf1\x16\x93\x77\x85\x25\xfd\x3f\x36\x77\x27\x46\x7f\xfa\xe7\x5f\x4d\x8c\xbe\x69\x63\xf4\xdf\x5e\xc6\x68\xd8\x0e\xd2\xa7\x27\xfd\xcf\xc9\xa7\xcb\x4f\xa7\xdb\x61\xfa\xb4\xd6\x74\x1a\x6c\xc5\xe9\x04\xba\x99\xf7\xec\x85\xdc\x96\xda\x0c\x14\xaf\x73\x73\x32\x55\x82\x2f\x35\x66\x5e\x47\x8b\x2a\x85\xa1\x85\x63\x77\x2f\x72\xef\xee\xaa\x94\x9a\x1c\x3e\xb6\x21\x39\xae\x5f\xb3\x06\xd2\xfb\xb1\x6b\xd5\x90\x5e\x37\x5b\x85\x8b\x64\xe3\x6a\x61\x53\xd6\x9d\x6c\x37\x76\xa5\xa5\xad\xac\xa0\xdf\xcd\x80\xa3\xd6\x28\x7b\xaa\x22\xb9\x09\x46\x89\xb9\x42\x6c\x14\x8d\xea\x9a\x91\x89\x31\xac\xac\x96\xfa\x45\x90\x81\x66\xf2\x6d\xa5\xca\xe8\x31\xe4\x4d\x87\xdb\x55\xeb\x75\x9a\x94\xc6\xc6\x72\xaf\x23\x96\xda\xec\x72\xdb\x6e\xaf\x6d\x89\x33\x7b\xb7\xf6\xe5\x75\x36\x8d\xf5\x3a\xaf\x4b\x83\xb6\x34\xaf\x93\xa9\x43\x63\xb6\xae\xf9\x86\xf8\x32\x81\xea\x0d\xab\x15\x0c\x86\x8d\xa2\x24\x8e\x83\xe6\x6f\x33\x83\xda\x2a\xb0\x35\x7f\x66\x40\xe6\x75\xf6\x5e\xd8\x5a\x55\x10\x0e\x15\x20\x51\x66\x51\x5e\xde\xd2\xf6\x0f\x13\xaf\x92\xa5\x5e\x31\xea\x0f\x47\x3c\x3b\xb7\x48\x67\x22\x5f\x2a\x73\xbb\x39\x76\x8d\x06\xaf\x58\x23\xe3\x7d\xb6\x86\x1c\xd5\x45\x64\x0f\x60\xac\x72\xc9\x2a\x0d\x4a\xe6\xaf\xae\x56\x57\x6d\x1d\x39\x4a\xc2\x38\x1c\x6d\x10\x6c\xbd\xfa\x9b\xf2\xaf\xc7\x91\x13\x7c\xed\x79\xe3\xc8\xd5\xd7\xbd\xb1\x49\xaf\x6c\xc9\x9c\xb2\x3b\xc8\x39\x51\x6a\xe2\xdb\x73\x57\x97\xb7\xc7\x8b\xe4\xfa\x57\xa6\x91\x80\xad\xb4\x8f\xa3\x45\x52\x77\x18\xac\x81\x02\xf5\x42\xd0\x89\x5f\x09\xa5\x7d\x30\xd9\xaf\x28\x27\x7e\xb4\x29\xc1\x0e\x76\x27\x4c\x1b\x38\xf1\x8d\x43\xfb\x50\x92\x02\x27\xbe\xf9\xf5\xa1\xe2\x24\xc7\x85\xe0\x14\xe5\xc4\xff\x5d\xa1\x74\x64\x89\xff\x5d\x32\x89\x74\xe2\x37\x6f\x3e\x44\x07\x84\x56\x44\xa9\x7b\x21\x69\x23\xd8\xb4\x77\x04\x7f\x6d\x87\x1c\x23\xd8\xa5\xa2\x8d\xd8\x5b\xc4\xca\x87\x3b\xc2\x97\x38\xf1\x45\xb9\xcd\x36\x5d\x6a\x2d\xca\x9a\x4f\x2d\xa7\x05\xd3\x7e\xb3\xa6\x53\x5d\xc2\xe6\x6d\x79\x9d\xc4\xb7\x25\x1d\xff\xfa\x37\xd4\x50\x20\xb0\x32\x1c\x47\x4e\x58\xbd\xd6\x91\x59\xec\x6b\x6f\x1c\x51\x76\x67\xb7\xcf\x6d\xdb\x38\x72\xff\x6b\xf2\xbf\x00\x00\x00\xff\xff\x25\x04\x06\xbf\x46\x19\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6470, mode: os.FileMode(420), modTime: time.Unix(1506801124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"auth.html": authHtml,
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"auth.html": &bintree{authHtml, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

