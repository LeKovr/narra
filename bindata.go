// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7b\x6f\xdb\x38\x12\xff\x3b\xfa\x14\xb3\x0a\x8a\xd4\x39\x59\x8f\xd8\x8e\x53\xf9\x71\x07\x6c\xbb\x8b\x03\xf6\xae\xc5\x5d\x16\xb8\xc3\x62\xff\xa0\xc4\xb1\xcd\x46\x12\x75\x24\x9d\x38\x0d\xf2\xdd\x0f\x7c\x48\x7e\xc4\x6e\xe3\xb4\xb1\x13\x5b\x1c\x72\x5e\xe4\xf0\x37\xe4\x78\xfc\xd3\xfb\x8f\x3f\x5f\xff\xf7\xd3\x07\x58\xa8\xb2\x98\x7a\x63\xfd\x05\xfa\x1b\x09\x9d\x7a\x00\xe3\x12\x15\x81\x7c\x41\x84\x44\x35\xf1\x7f\xbf\xfe\xa5\x7b\xe5\x9b\x0e\xc5\x54\x81\xd3\xdf\xf8\x9c\x55\xf0\x0b\x17\xe5\x38\xb2\x14\xdd\x57\xb0\xea\x06\x04\x16\x13\x5f\xaa\xfb\x02\xe5\x02\x51\xf9\xb0\x10\x38\x9b\xf8\x0b\xa5\x6a\x99\x46\x51\x4e\xab\xcf\x32\xcc\x0b\xbe\xa4\xb3\x82\x08\x0c\x73\x5e\x46\xe4\x33\x59\x45\x05\xcb\x64\x54\x71\x51\x92\x82\x7d\xc1\x68\x10\xc6\x61\xbc\x6e\x87\x25\xab\xc2\x5c\x4a\x63\x85\x7e\x8d\x8d\x8e\xa6\x15\x9d\xc3\x3f\x3f\x5e\x7f\x48\xe1\x7a\x81\x60\xb5\xc3\x1d\x0a\x04\x42\x29\x52\x60\x55\xc1\x2a\x84\x0c\x73\xb2\x94\x08\x9f\x04\xce\xd8\x6a\x26\x10\xa1\x42\xa4\x12\x48\x9e\xa3\x94\xa0\x38\xdc\xf3\xa5\x68\x04\x90\x8a\x82\x5a\xe0\x3d\x94\x4b\xa9\x20\x43\x27\x86\x02\x9b\x59\x3a\x11\x08\xbc\x82\x82\xe7\xa4\x00\xca\xe4\xcd\x4f\x70\x1e\x39\x8b\xfe\xc6\xca\x9a\x0b\x05\x4b\x51\xbc\x6d\x9c\x9f\xf1\x4a\xc9\x70\xce\xf9\xbc\x40\x52\x33\x69\x9c\xcf\xa5\xfc\xeb\x8c\x94\xac\xb8\x9f\x7c\xac\xb1\xfa\xcb\xbf\x49\x25\x3b\x23\x2f\xcc\x54\x05\x0f\x5a\x6a\x5d\x90\xfb\xd4\xe9\xee\x66\x05\xcf\x6f\x46\x70\xbe\x43\x1f\xc1\xf9\x17\xce\xcb\x14\x92\x11\xd4\x84\x52\x56\xcd\x53\xe8\xd7\x2b\x48\xe2\x7a\xa5\x1f\x46\x50\x12\x31\x67\x55\x37\xe3\x4a\xe9\x81\xf1\x08\xb4\x39\x5d\xc9\xbe\x60\x0a\x49\x4f\x0f\x31\x1a\x16\xc8\xe6\x0b\x95\x42\x72\xa5\x49\x39\x2f\xb8\x48\xe1\xb4\x67\x5e\x23\x50\xb8\x52\x5d\x52\xb0\x79\x95\x42\x8e\x95\x42\x31\x32\x24\xb9\x20\x94\xdf\xa5\x10\x43\xa2\xb5\xd6\x2b\x10\xf3\x8c\xbc\xbd\x18\x0c\x02\x58\x7f\xc4\xe1\x70\xd0\x19\xc1\x2d\x0a\xc5\x72\x52\x34\x82\x4a\x46\x69\x81\x23\xc8\x48\x7e\x33\x17\x7c\x59\xd1\x6e\xa3\x77\x36\xd0\xef\xad\x2e\x56\x92\x39\xa6\xd0\x2d\xf9\x97\xae\xb6\x98\x88\xee\x5c\x10\xca\xb0\x52\x6f\x15\xaf\x03\x38\x9d\x99\x57\x00\xa7\x78\xa9\xdf\x9d\xfd\xec\xf2\x7b\xb8\xef\x30\xbb\x61\x6a\xcd\x6a\x45\x05\x10\x43\xac\x3f\x92\x38\x7e\x13\xc0\x4c\xf0\xf2\xad\x93\xd7\x09\x40\xf1\xb7\x8d\xcc\xaf\x0a\xfd\x0e\xb3\xf8\x77\x30\xbf\x80\x53\x60\x8d\x44\xa5\x60\xbf\xbb\xab\x11\xcc\x58\xa1\x50\xa4\x50\x0b\x3e\x67\x34\xa5\x2b\x23\x5c\x09\x52\xc9\x19\x17\x65\x58\xb2\x5c\x70\xc9\x67\x2a\x6c\xf5\x48\x45\x84\xfa\x59\xaf\xb7\x54\x62\xd2\x2a\xc4\x8a\xae\x89\x56\x79\x00\xbf\x3a\xa6\xeb\xfb\x1a\x27\xb1\x36\x86\x0b\x8a\xa2\x0d\x17\x3b\x6e\xf7\x7b\x77\x98\x09\x4d\xbd\x4e\xf6\x2f\x4c\x3a\xcf\x21\x5d\x0c\x5a\x7d\xa9\x89\x70\xc9\x0b\x46\xd7\x3a\x9a\xe5\x73\xba\xb4\xa5\x4b\x99\xda\xcd\x67\x82\x75\x5f\xc7\xde\xc1\xad\xa0\x55\xbb\xaf\x58\x25\x51\xb9\xdd\x15\x1f\xd8\x5b\x17\x9d\xc0\x8d\xb8\x68\xf6\xdf\x86\xf9\xb1\x36\xdf\xd9\xf1\xc3\xe5\xbe\x82\xc8\x7c\x29\xa4\x5e\xac\x9a\x33\x03\x33\x70\xee\x10\xac\xc0\x99\x4a\x21\xec\x61\x39\x82\x47\x83\x93\xe9\x82\xdf\xa2\x08\xc0\x3c\x93\x5c\xb1\x5b\xb4\x8d\x70\xab\x41\x99\x24\x59\x81\xd4\x36\xff\x68\x9a\x7f\xc2\xc3\x3e\xe4\x69\x96\xd5\xaa\xe8\x16\x44\xcc\x11\x1e\xd6\xe8\xfa\x4e\xe3\x9c\x59\xaf\x4d\x1c\x1d\x3c\xc1\x51\x9b\xc2\x0e\x86\xc7\xe0\x50\x78\x0c\xf6\x84\x87\xa1\x6d\xfa\x0c\x0f\xfb\x11\x9a\x62\xce\x05\x51\x8c\x57\xda\x80\x6a\x3f\xb6\xb6\x9b\x63\xdd\x55\x73\xc9\x2c\x57\x0c\x5d\xeb\x4c\x63\xb7\xd9\xc3\xae\x73\x0f\x87\xde\x33\xd2\x61\x88\x73\xe8\x48\x0e\x79\x24\x03\x3f\x6e\xfc\x51\x83\xdd\xa2\xd7\x82\x95\x44\xdc\xdb\x80\x69\x5a\xed\xcc\xef\x24\xbe\xee\x46\xc0\xef\xc2\x46\x9b\xce\xcc\x6b\x57\xbe\x0b\xd3\xf5\x62\x7e\x25\x77\x6e\x73\xee\x0f\xdd\x3e\x19\x0e\x69\xff\xc8\xa4\x79\x89\xd9\x25\xc5\xa0\xe1\x3e\x32\x69\x3e\x8b\xfb\x88\xa4\x69\xe5\xb9\xa4\xe9\x64\xbe\x20\x69\x3e\xcb\xac\x43\x49\xf3\x39\xcc\x2f\xe0\x7c\x8d\xa4\xd9\x28\xdc\x4a\x9a\x56\xf9\x9e\xa4\xb9\x2f\x8b\xf5\x86\x97\x17\x59\x3e\xda\x0e\xea\xe6\x2c\x97\xac\x41\xda\xbc\xc3\xfe\x0f\xc7\xfc\xa7\xb1\xbd\x89\xea\x2d\x6d\x13\xd0\x77\xb6\xcf\x0e\x71\x1b\xed\x1b\xf2\x16\xea\x37\xf3\x7e\x10\x21\x9b\x8d\xe4\x0c\x33\x87\x6f\x78\x80\x3b\x46\xd5\x22\x35\xf1\x3a\x6a\x4f\xe8\xee\x64\xfe\xe8\x79\xe7\xf0\xb0\x9d\xc3\xd9\x17\x9d\x31\x1c\x96\x67\x7c\xb5\x99\x87\xf7\xf5\xc9\x83\x5d\xfc\x50\xcf\x01\xf2\xa3\xe7\x99\xbb\xdd\x8e\xcd\x2e\x37\xd9\x86\x9e\xe5\x59\xc1\xef\xd2\x05\xa3\x14\x2b\xc3\x94\x71\xaa\xb1\xc5\x3b\xd9\x64\xf3\x4e\x36\xf9\xbc\x13\x93\xf7\xec\xd5\x25\x85\x33\x7d\x79\x01\x7d\x79\x39\x0b\x40\x92\x4a\x76\x25\x0a\x36\x1b\x79\x27\xeb\x79\x4d\xe1\x34\x7e\x77\x31\x1c\x5c\xee\x50\xcd\x6c\xe8\x20\x25\xc5\x7a\x27\xc5\x6f\x1c\x20\x60\x51\xb0\x5a\x22\xe4\x36\x1c\x4c\xe0\x24\x71\x3f\x48\x2e\xae\x82\xa4\x77\x15\x84\xfd\x0e\x24\xf1\x9b\xc0\x76\xf4\xae\x82\x24\xe9\x07\xc3\xcb\x20\xee\x40\x3f\x7e\xd3\x09\x0e\x63\x9e\x95\x35\x18\x06\xc9\xb0\x17\x5c\x24\xef\x02\x0d\xd6\xa0\x75\x9a\x8e\xfe\x45\x70\x19\x07\x57\x43\xa7\x41\xcb\xda\x0f\xa0\xdd\xfe\x80\xe2\x3c\x00\x38\xbd\x1c\xc6\x34\x89\x8d\x08\xe7\xaa\x65\xdc\x75\xd8\x45\xc7\xab\xf9\xfc\x75\x58\x3c\xe8\xf7\x61\xb7\x0f\x88\xdb\xe7\xf9\x57\x1d\xe7\xaf\xe9\xf3\x01\x20\x7f\x81\xbb\x4f\x25\x1d\xed\x69\x29\x5f\xd3\xd5\x43\x89\xf8\x05\xbe\xee\x11\x75\xb4\xb3\xaf\x1e\xcf\x4f\x9d\x05\x5b\xc9\x78\x89\xcb\xbb\xc2\x92\xde\xb7\xdd\xdd\xc9\xd1\xef\xff\xf3\x77\x9d\xa3\xaf\xdb\x1c\xfd\x8f\xa7\x39\x1a\xb6\x93\xf4\xd9\x69\xef\x43\xf2\xfe\xf2\xfd\xd9\x76\x9a\x3e\x73\x9a\xce\x82\xad\x3c\x9d\x40\x67\xe4\x3d\x7a\x61\x61\x4a\x6d\x1a\x8a\xd7\x67\x73\x92\x49\x5e\x2c\x15\x8e\xbc\x13\xc5\xeb\x14\x06\x06\x8e\xed\xbd\xc8\x3e\xdb\xab\x52\xaa\xcf\xf0\xb1\x49\xc9\xb1\x7b\x1c\x35\x90\xde\x8b\x6d\xcb\x41\xba\x6b\xb6\x0a\x17\xc9\xc6\xd5\xc2\x1c\x59\x77\x4e\xbb\xb1\x2d\x2d\x6d\x9d\x0a\x7a\x9d\x11\x14\xa8\x14\x8a\xae\xac\x49\xae\x93\x51\xa2\xaf\x10\x1b\x45\x23\x57\x33\xd2\x39\x86\x55\xf5\x52\xfd\xa1\xb4\xb3\x7a\xc0\x9f\x01\x6c\x50\x6a\x22\xe5\x1d\x17\x3a\x4d\x6f\x27\x21\xf0\x1e\x3d\xca\x6e\x4f\xf3\x05\xea\x5c\xec\xc1\x1e\xe9\xde\xa3\x57\x90\x0c\x0b\xcd\xbb\x5b\xe4\xf2\x4e\x36\xbd\xf2\x4e\x9e\x77\xde\xe9\x75\xda\x49\x75\xf7\x4f\xed\xbd\x31\xc6\x18\x6d\x16\x68\xa7\xc2\xe6\x46\x6c\x6d\x94\xa7\x42\x9b\xa3\x98\x39\x83\x78\x27\x7c\xa9\x74\x74\xb6\xed\xf6\xba\x99\xd8\xe5\xfa\x81\xee\x3c\x3d\x04\x1e\x1a\xb3\x55\x9e\xd0\xc4\xa7\x07\xbf\xee\xa0\x5e\x41\x7f\xd0\x28\x4a\xe2\x38\x68\xfe\x37\x4f\x7e\x5b\x85\xc1\xe6\x5f\x0f\x18\x79\x27\x7b\x2f\x9a\xad\x2a\x08\x07\x12\x90\x48\x3d\x29\x4f\x6f\x97\xfb\x87\xf1\x67\xc9\x92\xcf\x18\xf5\xcd\x11\x2e\x0e\xd2\x19\xcf\x97\x52\xdf\xca\x8e\x9d\xa3\xfe\x33\xe6\x48\xef\x1a\x53\xfb\x8e\x5c\xf1\xdb\x03\x18\xcb\x5c\xb0\x5a\x81\x14\xf9\xb3\xab\xec\x75\x5b\xff\x8e\x92\x30\x0e\x87\x1b\x04\x53\x67\xff\x2c\xfd\xe9\x38\xb2\x82\xa7\x9e\x37\x8e\xec\xef\x02\xde\x58\x1f\x0b\x4d\xa9\x9f\xb2\x5b\xc8\x0b\x22\xe5\xc4\x37\x78\xe1\xca\xf2\xe3\x45\x32\xfd\x95\x29\x24\x60\x7e\x21\x18\x47\x8b\xc4\x75\x68\x8c\x84\x12\xd5\x82\xd3\x89\x5f\x73\xa9\x7c\xd0\xa7\x76\x5e\x4d\xfc\x68\x53\x82\x19\x6c\xb7\x94\xc1\x01\x5f\x07\xb4\x0f\x15\x29\x71\xe2\xeb\x4f\x1f\xea\x82\xe4\xb8\xe0\x05\x45\x31\xf1\x7f\x97\x28\x2c\x59\xe0\xff\x96\x4c\x20\x9d\xf8\xcd\x93\x0f\xd1\x01\xa1\x0d\xba\x34\x82\x75\x7b\x47\xf0\xa7\x76\xc8\xb7\x04\xeb\xb9\x60\x74\xe2\x1b\x44\xf2\xa7\x5b\x8a\x0c\x2d\xe3\xab\x46\xd1\x0d\x62\xed\x83\xf9\xc9\x64\xe2\xff\x0b\x4b\x2c\x33\x14\xa0\xcd\xb7\x12\x6e\xb4\xe8\xb1\x05\xaf\x19\x17\x96\x34\xdd\x18\x38\x8e\x4c\xe7\x74\x1c\x51\x76\xbb\x61\x44\xb6\x54\x8a\x57\x4e\xab\x5c\x66\x25\x53\x7e\xb3\x42\x99\xaa\x60\xb3\x66\xb0\xbe\xca\xb4\x85\x2d\x7f\xfa\x1b\x2a\x28\x11\x58\x15\x8e\x23\x2b\xcc\xad\x5c\xa4\x97\x6e\xea\x39\x85\xde\x38\xb2\x41\x30\x8e\xec\x6f\x47\xff\x0f\x00\x00\xff\xff\x7d\x67\xad\xf6\x4c\x1a\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6732, mode: os.FileMode(420), modTime: time.Unix(1506857553, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

